// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/cpuguy83/containerd-shim-systemd-v1/options/options.proto

package options

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogMode int32

const (
	LogMode_DEFAULT  LogMode = 0
	LogMode_JOURNALD LogMode = 1
	LogMode_STDIO    LogMode = 2
	LogMode_NULL     LogMode = 3
)

var LogMode_name = map[int32]string{
	0: "DEFAULT",
	1: "JOURNALD",
	2: "STDIO",
	3: "NULL",
}

var LogMode_value = map[string]int32{
	"DEFAULT":  0,
	"JOURNALD": 1,
	"STDIO":    2,
	"NULL":     3,
}

func (x LogMode) String() string {
	return proto.EnumName(LogMode_name, int32(x))
}

func (LogMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_35d5cde8839f0fbc, []int{0}
}

type CreateOptions struct {
	LogMode              LogMode  `protobuf:"varint,1,opt,name=log_mode,json=logMode,proto3,enum=containerd.systemd.v1.LogMode" json:"log_mode,omitempty"`
	SdNotifyEnable       bool     `protobuf:"varint,2,opt,name=sd_notify_enable,json=sdNotifyEnable,proto3" json:"sd_notify_enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateOptions) Reset()         { *m = CreateOptions{} }
func (m *CreateOptions) String() string { return proto.CompactTextString(m) }
func (*CreateOptions) ProtoMessage()    {}
func (*CreateOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_35d5cde8839f0fbc, []int{0}
}
func (m *CreateOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOptions.Merge(m, src)
}
func (m *CreateOptions) XXX_Size() int {
	return m.Size()
}
func (m *CreateOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOptions proto.InternalMessageInfo

func (m *CreateOptions) GetLogMode() LogMode {
	if m != nil {
		return m.LogMode
	}
	return LogMode_DEFAULT
}

func (m *CreateOptions) GetSdNotifyEnable() bool {
	if m != nil {
		return m.SdNotifyEnable
	}
	return false
}

func init() {
	proto.RegisterEnum("containerd.systemd.v1.LogMode", LogMode_name, LogMode_value)
	proto.RegisterType((*CreateOptions)(nil), "containerd.systemd.v1.CreateOptions")
}

func init() {
	proto.RegisterFile("github.com/cpuguy83/containerd-shim-systemd-v1/options/options.proto", fileDescriptor_35d5cde8839f0fbc)
}

var fileDescriptor_35d5cde8839f0fbc = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2e, 0x28, 0x4d, 0x2f, 0xad, 0xb4, 0x30, 0xd6,
	0x4f, 0xce, 0xcf, 0x2b, 0x49, 0xcc, 0xcc, 0x4b, 0x2d, 0x4a, 0xd1, 0x2d, 0xce, 0xc8, 0xcc, 0xd5,
	0x2d, 0xae, 0x2c, 0x2e, 0x49, 0xcd, 0x4d, 0xd1, 0x2d, 0x33, 0xd4, 0xcf, 0x2f, 0x28, 0xc9, 0xcc,
	0xcf, 0x2b, 0x86, 0xd1, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xa2, 0x08, 0x1d, 0x7a, 0x50,
	0xc5, 0x7a, 0x65, 0x86, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x15, 0xfa, 0x20, 0x16, 0x44,
	0xb1, 0x52, 0x09, 0x17, 0xaf, 0x73, 0x51, 0x6a, 0x62, 0x49, 0xaa, 0x3f, 0xc4, 0x0c, 0x21, 0x4b,
	0x2e, 0x8e, 0x9c, 0xfc, 0xf4, 0xf8, 0xdc, 0xfc, 0x94, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e,
	0x23, 0x39, 0x3d, 0xac, 0x06, 0xea, 0xf9, 0xe4, 0xa7, 0xfb, 0xe6, 0xa7, 0xa4, 0x06, 0xb1, 0xe7,
	0x40, 0x18, 0x42, 0x1a, 0x5c, 0x02, 0xc5, 0x29, 0xf1, 0x79, 0xf9, 0x25, 0x99, 0x69, 0x95, 0xf1,
	0xa9, 0x79, 0x89, 0x49, 0x39, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x1c, 0x41, 0x7c, 0xc5, 0x29,
	0x7e, 0x60, 0x61, 0x57, 0xb0, 0xa8, 0x96, 0x25, 0x17, 0x3b, 0x54, 0xb7, 0x10, 0x37, 0x17, 0xbb,
	0x8b, 0xab, 0x9b, 0x63, 0xa8, 0x4f, 0x88, 0x00, 0x83, 0x10, 0x0f, 0x17, 0x87, 0x97, 0x7f, 0x68,
	0x90, 0x9f, 0xa3, 0x8f, 0x8b, 0x00, 0xa3, 0x10, 0x27, 0x17, 0x6b, 0x70, 0x88, 0x8b, 0xa7, 0xbf,
	0x00, 0x93, 0x10, 0x07, 0x17, 0x8b, 0x5f, 0xa8, 0x8f, 0x8f, 0x00, 0xb3, 0x53, 0xc0, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x94,
	0x1d, 0x79, 0xa1, 0x66, 0x0d, 0xa5, 0x23, 0x18, 0x92, 0xd8, 0xc0, 0x61, 0x61, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xe4, 0x1f, 0xe4, 0x4f, 0x80, 0x01, 0x00, 0x00,
}

func (m *CreateOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SdNotifyEnable {
		i--
		if m.SdNotifyEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.LogMode != 0 {
		i = encodeVarintOptions(dAtA, i, uint64(m.LogMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogMode != 0 {
		n += 1 + sovOptions(uint64(m.LogMode))
	}
	if m.SdNotifyEnable {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOptions(x uint64) (n int) {
	return sovOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogMode", wireType)
			}
			m.LogMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogMode |= LogMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdNotifyEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SdNotifyEnable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOptions = fmt.Errorf("proto: unexpected end of group")
)
